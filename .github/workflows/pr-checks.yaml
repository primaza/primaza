name: PR checks

on: # yamllint disable-line rule:truthy
  pull_request:
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - "*.md"
      - "DCO"
      - "LICENSE"
      - "OWNERS"
      - "PROJECT"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  GO111MODULE: "on"
  GO_VERSION: "^1.21"
  # quote this, since yaml will otherwise treat this as a float
  PYTHON_VERSION: "3.10"
  TEST_ACCEPTANCE_CLI: "kubectl"
  TEST_RESULTS: "out/acceptance-tests"

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-20.04

    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: "x64"

      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Lint Go
        if: success() || failure()
        run: make lint-go
        env:
          GO_LINT_CONCURRENCY: 2
          GO_LINT_OUTPUT: github-actions

      - name: Lint YAML files
        if: success() || failure()
        run: make lint-yaml

      - name: Lint Python
        if: success() || failure()
        run: make lint-python

      - name: Lint Gherkin (feature) files
        if: success() || failure()
        run: make lint-feature-files

      - name: Lint conflicts in source files
        if: success() || failure()
        run: make lint-conflicts

      - name: Lint shell scripts
        if: success() || failure()
        run: make lint-shell

      - name: Check manifests up to date
        if: success() || failure()
        run: |
          set -e

          make manifests
          make primaza go-generate
          git update-index -q --refresh
          if ! git diff-index --quiet HEAD -- config/ ; then
            echo "the following manifests are not up-to-date"
            git diff config
            exit 1
          fi
          if ! git diff-index --quiet HEAD -- pkg/authz/ ; then
            echo "the following generated permission list are not up-to-date"
            git diff pkg/authz
            exit 1
          fi

      - name: Lint Docs
        if: success() || failure()
        run: make lint-docs

  unit:
    name: Unit Tests
    runs-on: ubuntu-20.04

    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Unit Tests with Code Coverage
        run: |
          make test

  features:
    name: Acceptance Tests Features
    runs-on: ubuntu-20.04
    outputs:
      features: ${{ steps.features.outputs.features }}
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - id: features
        run: |
          cd test/acceptance/features
          FEATURES=$(ls *.feature | jq -R -s -c 'split("\n")[:-1]')
          echo "features=$FEATURES" >> $GITHUB_OUTPUT

  build:
    name: Build images
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        include:
          - make: primaza
            image-name: primaza-controller
          - make: agentapp
            image-name: agentapp
          - make: agentsvc
            image-name: agentsvc
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Build images
        run: |
          make ${{ matrix.make }} docker-build IMG=${{ matrix.image-name }}:testing
          docker save ${{ matrix.image-name }}:testing -o ${{ matrix.image-name }}.tar

      - name: Upload image artifacts
        uses: actions/upload-artifact@v3
        with:
          name: images
          path: ${{ matrix.image-name }}.tar

  acceptance:
    name: Acceptance Tests
    runs-on: ubuntu-20.04
    timeout-minutes: 90

    needs: ["features", "build"]
    strategy:
      fail-fast: false
      matrix:
        feature: ${{ fromJSON(needs.features.outputs.features) }}

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: "x64"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download pre-built images
        uses: actions/download-artifact@v3
        with:
          name: images
          path: images/

      - name: Acceptance tests
        timeout-minutes: 60
        env:
          EXTRA_BEHAVE_ARGS: -i test/acceptance/features/${{ matrix.feature }} -k --tags=~@disable-github-actions
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRIMAZA_CONTROLLER_IMAGE_REF: primaza-controller:testing
          PRIMAZA_AGENTAPP_IMAGE_REF: agentapp:testing
          PRIMAZA_AGENTSVC_IMAGE_REF: agentsvc:testing
          CLUSTER_PROVIDER: external
          MAIN_KUBECONFIG: out/main-kubeconfig
          WORKER_KUBECONFIG: out/worker-kubeconfig
        run: |
          # ensure out/ exists
          mkdir out/

          # we need yq
          make yq
          echo "##[group]Creating clusters"
            kind create cluster --name main
            kind create cluster --name worker
            kind get kubeconfig --name main > ${MAIN_KUBECONFIG}
            kind get kubeconfig --name worker > ${WORKER_KUBECONFIG}

            # we need to rewrite the server addresses so that connections from
            # both inside and outside of docker can be established using the
            # same config
            bin/yq -i ".clusters[0].cluster.server = \"https://$(docker container inspect main-control-plane | bin/yq '.[0].NetworkSettings.Networks.kind.IPAddress'):6443\"" "${MAIN_KUBECONFIG}"
            bin/yq -i ".clusters[0].cluster.server = \"https://$(docker container inspect worker-control-plane | bin/yq '.[0].NetworkSettings.Networks.kind.IPAddress'):6443\"" "${WORKER_KUBECONFIG}"

            kind load image-archive --name main images/primaza-controller.tar
            kind load image-archive --name main images/agentapp.tar
            kind load image-archive --name main images/agentsvc.tar
            kind load image-archive --name worker images/primaza-controller.tar
            kind load image-archive --name worker images/agentapp.tar
            kind load image-archive --name worker images/agentsvc.tar
          echo "##[endgroup]"

          echo "##[group]Running acceptance tests"
            make kustomize test-acceptance
          echo "##[endgroup]"

      - uses: actions/upload-artifact@v3
        if: ${{ steps.check-skip-acceptance.outputs.can_skip != 'true' && always() }}
        with:
          name: acceptance-test-results
          path: ${{ env.TEST_RESULTS }}

  wait-acceptance:
    needs: acceptance
    name: Wait for Acceptance Tests
    runs-on: ubuntu-20.04

    steps:
    - name: None
      run: exit 0

  single-commit:
    name: Single commit PR
    runs-on: ubuntu-20.04
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Verify number of commits in the PR is 1
        run: |
          COMMIT_COUNT="$(git log --oneline ${{github.event.pull_request.base.sha}}..${{github.event.pull_request.head.sha}} | wc -l)"
          if ! [ $COMMIT_COUNT -eq 1 ]; then
            echo "Number of commits in the PR ($COMMIT_COUNT) must not be greater than one."
            echo "Please squash all PR commits into a single one (https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#_squashing)"
            exit 1
          fi
