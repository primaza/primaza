name: PR checks

on: # yamllint disable-line rule:truthy
  pull_request:
    branches:
      - main

env:
  GO111MODULE: "on"
  MINIKUBE_WANTUPDATENOTIFICATION: false
  MINIKUBE_WANTREPORTERRORPROMPT: false
  SDK_VERSION: "1.25.0"
  K8S_VERSION: "1.25.3"
  GO_VERSION: "^1.20"
  MINIKUBE_VERSION: "1.28.0"
  TEST_ACCEPTANCE_CLI: "kubectl"
  TEST_RESULTS: "out/acceptance-tests"

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-20.04

    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          architecture: "x64"

      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Lint Go
        if: success() || failure()
        run: make lint-go

      - name: Lint YAML files
        if: success() || failure()
        run: make lint-yaml

      - name: Lint Python
        if: success() || failure()
        run: make lint-python

      - name: Lint Gherkin (feature) files
        if: success() || failure()
        run: make lint-feature-files

      - name: Lint conflicts in source files
        if: success() || failure()
        run: make lint-conflicts

      - name: Lint shell scripts
        if: success() || failure()
        run: make lint-shell

  unit:
    name: Unit Tests
    runs-on: ubuntu-20.04

    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Unit Tests with Code Coverage
        run: |
          make test

  features:
    name: Acceptance Tests Features
    runs-on: ubuntu-20.04
    outputs:
      features: ${{ steps.features.outputs.features }}
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - id: features
        run: |
          cd test/acceptance/features
          FEATURES=$(ls *.feature | jq -R -s -c 'split("\n")[:-1]')
          echo "features=$FEATURES" >> $GITHUB_OUTPUT

  acceptance:
    name: Acceptance Tests
    runs-on: ubuntu-20.04
    timeout-minutes: 90

    needs: features
    strategy:
      fail-fast: false
      matrix:
        feature: ${{ fromJSON(needs.features.outputs.features) }}

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          architecture: "x64"

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup-cli
        uses: ./.github/actions/setup-cli
        with:
          start-minikube: false

      - name: Acceptance tests
        timeout-minutes: 60
        run: make kustomize test-acceptance
        env:
          EXTRA_BEHAVE_ARGS: -i test/acceptance/features/${{ matrix.feature }} --tags=~@disable-github-actions
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/upload-artifact@v3
        if: ${{ steps.check-skip-acceptance.outputs.can_skip != 'true' && always() }}
        with:
          name: acceptance-test-results
          path: ${{ env.TEST_RESULTS }}

  wait-acceptance:
    needs: acceptance
    name: Wait for Acceptance Tests
    runs-on: ubuntu-20.04

    steps:
    - name: None
      run: exit 0

  single-commit:
    name: Single commit PR
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Verify number of commits in the PR is 1
        run: |
          COMMIT_COUNT="$(git log --oneline ${{github.event.pull_request.base.sha}}..${{github.event.pull_request.head.sha}} | wc -l)"
          if ! [ $COMMIT_COUNT -eq 1 ]; then
            echo "Number of commits in the PR ($COMMIT_COUNT) must not be greater than one."
            echo "Please squash all PR commits into a single one (https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#_squashing)"
            exit 1
          fi

  gosec:
    name: Run gosec security checks
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Run gosec
        uses: securego/gosec@v2.15.0
        with:
          args: '-no-fail -fmt sarif -out gosec.sarif ./...'

      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gosec.sarif
